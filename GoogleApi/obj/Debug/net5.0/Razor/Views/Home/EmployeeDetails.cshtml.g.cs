#pragma checksum "C:\Users\alex\source\repos\GoogleApi\GoogleApi\Views\Home\EmployeeDetails.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "54ca83d57b07813b812e343e6f0e8955918b2f6c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_EmployeeDetails), @"mvc.1.0.view", @"/Views/Home/EmployeeDetails.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\alex\source\repos\GoogleApi\GoogleApi\Views\_ViewImports.cshtml"
using GoogleApi;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\alex\source\repos\GoogleApi\GoogleApi\Views\_ViewImports.cshtml"
using GoogleApi.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"54ca83d57b07813b812e343e6f0e8955918b2f6c", @"/Views/Home/EmployeeDetails.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"38e8fd721301da6d72572250f196da1c1209ac82", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_EmployeeDetails : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("newEmployee"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\alex\source\repos\GoogleApi\GoogleApi\Views\Home\EmployeeDetails.cshtml"
  
    ViewData["Title"] = "Update Employee";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "54ca83d57b07813b812e343e6f0e8955918b2f6c3795", async() => {
                WriteLiteral("\r\n    <div class=\"form-group\">\r\n        <label");
                BeginWriteAttribute("class", " class=\"", 122, "\"", 130, 0);
                EndWriteAttribute();
                WriteLiteral(" for=\"empName\">Employee name:</label>\r\n        <input type=\"text\" id=\"empName\" name=\"empName\"");
                BeginWriteAttribute("value", " value=\"", 224, "\"", 232, 0);
                EndWriteAttribute();
                WriteLiteral(" required>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <label for=\"empDateOfHire\">Employee HireDate:</label>\r\n        <input type=\"datetime\" id=\"empDateOfHire\" name=\"empDateOfHire\"");
                BeginWriteAttribute("value", " value=\"", 422, "\"", 430, 0);
                EndWriteAttribute();
                WriteLiteral(" required>\r\n    </div>\r\n\r\n    <input type=\"hidden\" id=\"employeeId\" name=\"empId\"");
                BeginWriteAttribute("value", " value=\"", 510, "\"", 518, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n\r\n    <div>\r\n        <label for=\"ResidenceLat\">Residence Latitude:</label>\r\n        <input type=\"text\" id=\"ResidenceLat\" name=\"ResidenceLat\"");
                BeginWriteAttribute("value", " value=\"", 662, "\"", 670, 0);
                EndWriteAttribute();
                WriteLiteral(" required/>\r\n    </div>\r\n\r\n    <div>\r\n        <label for=\"ResidenceLng\">Residence Longitude:</label>\r\n        <input type=\"text\" id=\"ResidenceLng\" name=\"ResidenceLng\"");
                BeginWriteAttribute("value", " value=\"", 837, "\"", 845, 0);
                EndWriteAttribute();
                WriteLiteral(" required/>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <input type=\"checkbox\" id=\"CarOwner\" name=\"CarOwner\"");
                BeginWriteAttribute("value", " value=\"", 963, "\"", 971, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n        <label for=\"CarOwner\">Car Owner</label>\r\n    </div>\r\n\r\n    <div id=\"attributes\"></div>\r\n\r\n    <button class=\"btn btn-success\">Save</button>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>

        $(document).ready(function () {
            var employeeId = sessionStorage.getItem(""employeeId"");
            sessionStorage.removeItem(""employeeId"");

            var employeeName = $(""#empName"");
            var dateOfHire = $(""#empDateOfHire"");
            var empId = $(""#employeeId"");
            var attributesSection = $(""#attributes"");
            var CarOwner = $(""#CarOwner"");
            var ResidenceLat = $(""#ResidenceLat"");
            var ResidenceLng = $(""#ResidenceLng"");
            var empAttributesList = [];
            var objArray = [];  // stores attributes
            var empSupervisorId;

            $.ajax({
                type: ""Get"",
                url: ""/api/Attributes"",
                dataType: ""json"",
                async: false,
                success: function (response) {
                    for (var attribute of response) {

                        let myobj = { attrName: attribute.attrName, attrId: attribute.attrId } 
     ");
                WriteLiteral(@"                   objArray.push(myobj);
                        let template = `<input type=""checkbox"" id=""${attribute.attrId}"" name=""empattr"" value=""${attribute.attrId}"">
                                                    <label for=""empattr"">Name : ${attribute.attrName} | Value : ${attribute.attrValue} </label><br>`;
                        attributesSection.append(template);
                    }
                }
            });

            

            $.ajax({
                type: ""Get"",
                url: `/api/Employees/employee/${employeeId}`,
                dataType: ""json"",
                async: false,
                success: function (response) {
                    console.log(response);
                    //build the upcoming employee fields
                    employeeName.val(response.empName);
                    dateOfHire.val(new Date(response.empDateOfHire).toLocaleDateString()); 
                    empId.val(response.empId);                    
           ");
                WriteLiteral(@"         ResidenceLat.val(response.residenceLat);
                    ResidenceLng.val(response.residenceLng);
                    empSupervisorId = response.empSupervisorId;
                    if (response.carOwner == true)
                        CarOwner.attr('checked', true);

                    for (var record of response.employeeAttributes) {
                        empAttributesList.push(record.empattrAttributeId);
                    }
                }
            });


            $('input[type=""checkbox""]').each(function () {
                for (var attribute of empAttributesList) {
                    if ($(this).val() == attribute) {
                        $(this).prop('checked', true);
                    }
                }
            });

            console.log(objArray);

            let employeeModel = {};
            $(""#newEmployee"").submit(function (e) {
                e.preventDefault();

                employeeModel.empId = employeeId;
               ");
                WriteLiteral(@" employeeModel.empDateOfHire = dateOfHire.val();
                employeeModel.empName = employeeName.val();
                employeeModel.empSupervisorId = empSupervisorId;

                employeeModel.residenceLat = ResidenceLat.val();
                employeeModel.residenceLng = ResidenceLng.val();

                if (CarOwner.is(':checked'))
                    employeeModel.CarOwner = 1;
                else
                    employeeModel.CarOwner = 0;

                var arrayToCopy = [];

                // Begin of client side validation for attribute name
                
                $('input[type=""checkbox""]:checked:not(""#CarOwner"")').each(function () {
                    if ($(this).is(':checked')) {
                        let tempObj = { empattrAttributeId: $(this).val(), empattrEmployeeId: employeeId };
                        arrayToCopy.push(tempObj);
                        console.log(`checkbox value is ${tempObj.empattrAttributeId}`);
                    }
");
                WriteLiteral(@"                });

                var namesArray = [];
                for (var obj of objArray) {
                    for (var i = 0; i < arrayToCopy.length; i++) {
                        if (obj.attrId == arrayToCopy[i].empattrAttributeId) {
                            namesArray.push(obj.attrName);
                        }
                    }
                }

                if (namesArray != null) {
                    namesArray.sort();
                }

                let ok = true;
                for (var i = 0; i < namesArray.length; i++) {
                    console.log("""");
                    console.log(namesArray[i]);
                    if (namesArray[i] == namesArray[i+1]) {
                        alert(""You can not have twice or more of the same attribute!"");
                        ok = false;
                        break;
                    }
                }
                // End validation
                
                if (ok == true && names");
                WriteLiteral(@"Array != null) {
                    employeeModel.employeeAttributes = arrayToCopy;
                    console.log(employeeId);

                    $.ajax({
                        type: ""Put"",
                        url: `/api/Employees/updateEmployee/${employeeId}`,
                        headers: { 'Content-Type': 'application/json' },
                        data: JSON.stringify(employeeModel)
                    })
                        .done(function () {
                            console.log(""employees update done"");

                            $.ajax({                                                        // is it better inside done() or then() ???
                                type: ""Put"",
                                url: ""/api/Employees/updateEmployeesAttributes"",
                                headers: { 'Content-Type': 'application/json' },
                                data: JSON.stringify(employeeModel)
                            })
                       ");
                WriteLiteral(@"         .done(function () {
                                    console.log(""attributes update done"");
                                    window.location.assign(""Employees"");
                                })
                                .fail(function (e) {
                                    console.log(""attributes update failed"");
                                    console.log(employeeModel);
                                    console.log(e);
                                });
                            
                        })
                        .fail(function (e) {
                            console.log(e);
                            alert(""update failed, check your hiredate please!"")
                        });

                    console.log(employeeModel);
                }
            });
        });
        
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
