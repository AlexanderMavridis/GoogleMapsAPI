#pragma checksum "C:\Users\alex\source\repos\GoogleApi\GoogleApi\Views\Home\EmployeesWithRelatedAttributes.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "38cf6c2f3fd5aff8d28748d2962b4bfbb658396f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_EmployeesWithRelatedAttributes), @"mvc.1.0.view", @"/Views/Home/EmployeesWithRelatedAttributes.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\alex\source\repos\GoogleApi\GoogleApi\Views\_ViewImports.cshtml"
using GoogleApi;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\alex\source\repos\GoogleApi\GoogleApi\Views\_ViewImports.cshtml"
using GoogleApi.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"38cf6c2f3fd5aff8d28748d2962b4bfbb658396f", @"/Views/Home/EmployeesWithRelatedAttributes.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"38e8fd721301da6d72572250f196da1c1209ac82", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_EmployeesWithRelatedAttributes : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<div>
    <table id=""AttributesTable"" class=""table table-bordered"">
        <tr>
            <th>Attribute Name</th>
            <th>Attribute Value</th>
        </tr>
    </table>
</div>
<br />

<div id=""employeesHeading"" style=""display:none""><h4><b>Related Employees</b></h4></div>

<div>
    <table id=""EmployyesTable"" class=""table table-bordered"" style=""display:none"">
    </table>
</div>


");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>

        $(document).ready(function () {

            var attributesTable = $(""#AttributesTable"");
            var employeesTable = $(""#EmployyesTable"");
            var employeesHeading = $(""#employeesHeading"");
            var chosenAttrId;
            var arrayOfEmployees;

            $.ajax({
                type: ""Get"",
                url: ""/api/Attributes"",
                dataType: ""json""

            })
                .done(function (response) {
                    for (var attribute of response) {
                        let template = `<tr>
                                            <td>${attribute.attrName}</td>
                                            <td>${attribute.attrValue}</td>
                                            <td><button class=""chosenAttribute btn btn-success"" value=""${attribute.attrId}"">Choose</button>
                                            </tr>`;
                        attributesTable.append(template);
                    }
 ");
                WriteLiteral(@"               })

                .fail(function () {
                    console.log(""failed to load attributes"");
                });


            $(document).on(""click"", '.chosenAttribute', function () {
                employeesHeading.show();
                employeesTable.show().empty();

                chosenAttrId = $(this).val();

                //no2 solution
                arrayOfEmployees = [];

                $.ajax({
                    type: ""Get"",
                    url: `/api/Employees/getRelatedData/${chosenAttrId}`,
                    dataType: ""json"",
                    success: function (response) {
                        if (response.length == 0) {
                            employeesTable.append(`<tr><td><h5>There is no employee with this attribute!</h5></td></tr>`);
                        }
                        else {
                            for (var employee of response) {
                                let template2 = `<tr>
             ");
                WriteLiteral(@"                                        <td>${employee.empName}</td>
                                                     <td><button class=""chosenEmployee btn btn-primary"" value=""${employee.empId}"">Choose</button>`
                                employeesTable.append(template2);
                                let tempObj2 = {
                                    coords: { lat: `${employee.residenceLat}`, lng: `${employee.residenceLng}` },
                                    content: `<h1>${employee.empName}</h1>`
                                }
                                console.log(tempObj2);
                                arrayOfEmployees.push(tempObj2);
                            }
                        }

                    }
                });
            });

            //1st approach for sending data to maps
            //$(document).on(""click"", '.chosenEmployee', function () {
            //    var employeeId = $(this).val();
            //    let answer = confirm(""A");
                WriteLiteral(@"re you sure?"");
            //    if (answer) {
            //        sessionStorage.setItem(""attributeId"", chosenAttrId);
            //        sessionStorage.setItem(""employeeId"", employeeId);
            //        window.location.assign('TestingMap');
            //    }
            //});

            //2nd aproach
            $(document).on(""click"", '.chosenEmployee', function () {
                var employeeId = $(this).val();
                let answer = confirm(""Are you sure?"");
                if (answer) {
                    sessionStorage.setItem(""employees"", arrayOfEmployees);    
                    window.location.assign('TestingMap');
                }
            });

        });

    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
